<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Mon, 03 Oct 2022 13:48:21 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Basics | System]]></title>
            <guid>c885e42180dc4309a2c899251798ffde</guid>
            <pubDate>Mon, 03 Oct 2022 11:58:33 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="system">System</h1>
<p><a href="/article/basics-or-docker">Docker</a><br />
<a href="/article/basics-or-system">System</a><br />
<a href="/article/basics-or-git">GIT</a><br />
<a href="/article/basics-or-linux">Linux</a></p>
<ul>
<li>Install OpenSSH</li>
<li>Install GIT</li>
<li>Install Docker</li>
</ul>
<h2 id="install-openssh">Install OpenSSH</h2>
<h3 id="windows">Windows</h3>
<ol>
<li>Download &amp; Install <a title="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui" href="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui">OpenSSH</a></li>
</ol>
<p><em>If no admin rights, skip and go to step 2</em></p>
<h3 id="linux">Linux</h3>
<p><em>Only relevant if ssh-agent is not installed already</em></p>
<ol>
<li>Download &amp; Install <a title="https://ubuntu.com/server/docs/service-openssh" href="https://ubuntu.com/server/docs/service-openssh">OpenSSH</a></li>
</ol>
<div><pre class="hljs"><code>sudo apt install openssh-<span class="hljs-keyword">client</span></code></pre></div>
<h2 id="installing-git">Installing GIT</h2>
<h3 id="windows-2">Windows</h3>
<ol>
<li>Download &amp; Install <a title="https://git-scm.com/download/win" href="https://git-scm.com/download/win">GIT</a></li>
<li>Configure SSH keys</li>
</ol>
<h2 id="can-also-install-github-desktop">Can also install GitHub Desktop</h2>
<h3 id="linux-2">Linux</h3>
<p><a title="https://www.atlassian.com/git/tutorials/install-git#linux" href="https://www.atlassian.com/git/tutorials/install-git#linux">Instructions</a></p>
<div><pre class="hljs"><code><span class="hljs-attribute">sudo apt update</span></code></pre></div>
<div><pre class="hljs"><code>sudo apt <span class="hljs-keyword">install</span> git</code></pre></div>
<p>Verify installation</p>
<div><pre class="hljs"><code>git <span class="hljs-comment">--version</span></code></pre></div>
<h2 id="installing-docker">Installing Docker</h2>
<p>You have to install both docker and docker compose</p>
<h2 id="installing-vs-code">Installing VS Code</h2>
<p>First time setup</p>
<h3 id="windows-3">Windows</h3>
<p>Download GIT</p>
<h1 id="docker">Docker</h1>
<p><em>REQUIREMENT: Cloned Git-Repository which includes a DockerFile and Dockercompose (.yml) file</em></p>
<ul>
<li>Setting up the environment</li>
<li>Using the environment</li>
<li>Closing the environment</li>
<li>Common errors &amp; solutions</li>
</ul>
<h2 id="setting-the-environment">Setting the environment</h2>
<ol>
<li>Using a terminal, navigate to the folder which contains the Dockerfile (it should be the main folder of the repository)</li>
<li>Build the Dockerfile with the below code snippet.</li>
</ol>
<p><em>The Dockerfile should be a plaintext file called "Dockerfile"</em></p>
<div><pre class="hljs"><code>sudo docker build -t [name]:[version]            <span class="hljs-comment">#e.g. canopus:1.0</span></code></pre></div>
<ol start="3">
<li>Using the same terminal, use the below code snippet to initialize all the containers through a docker-compose (.yml) file.</li>
</ol>
<p><em>The Dockercompose file can be named however you like, but should use the .yml extension.</em></p>
<div><pre class="hljs"><code>sudo docker-compose -f docker-compose.yml up     <span class="hljs-comment">#-f flags allows for monitoring all containers in terminal</span></code></pre></div>
<h2 id="using-the-environment">Using the environment</h2>
<ol>
<li>Open a new terminal and enter the following commands:</li>
</ol>
<p><em>These commands are made for a container running 3.10-slim (Linux)</em></p>
<div><pre class="hljs"><code>sudo docker <span class="hljs-built_in">exec</span> -it [container name] /bin/bash <span class="hljs-comment">#e.g. sudo docker exec -it canopus /bin/bash</span></code></pre></div>
<ol start="2">
<li>In the same terminal (which is now a terminal within the container) navigate to the desired folder and run a file/program.</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-built_in">cd</span> path/path &amp; program file.ext                 <span class="hljs-comment">#e.g. cd app &amp; python3 main.py</span></code></pre></div>
<h2 id="closing-the-environment">Closing the environment</h2>
<ol>
<li>Using the terminal which is running the docker-compose, enter <code>CTRL+C</code>. This terminates all running containers.</li>
<li>Enter the following command:</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-attribute">sudo</span> docker-compose down                        <span class="hljs-comment">#add --remove-orphans if you want to clean everything</span></code></pre></div>
<ol start="3">
<li>Next time when starting the environment, you only have to do the <code>docker-compose up</code> from setting up the environment step 3</li>
</ol>
<h2 id="common-errors-solutions">Common errors &amp; solutions</h2>
<ul>
<li>Ports used in dockercompose file are already occupied</li>
</ul>
<h3 id="ports-used-in-dockercompose-file-are-already-occupied">Ports used in dockercompose file are already occupied</h3>
<ol>
<li>Open a new terminal</li>
<li>Identify program that is using the port</li>
</ol>
<div><pre class="hljs"><code>sudo lsof -i:[port]                             <span class="hljs-comment">#e.g. sudo lsof -i:2181</span></code></pre></div>
<p>This should return something like this:</p>
<div><pre class="hljs"><code>COMMAND PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
java    854 kafka  122u  IPv6  31313      0t0  TCP *:2181 (LISTEN)</code></pre></div>
<ol start="3">
<li>Terminate program that is using the port (decide at own discretion)</li>
</ol>
<div><pre class="hljs"><code>sudo <span class="hljs-built_in">kill</span> [PID]                                 <span class="hljs-comment">#e.g. sudo kill 854</span></code></pre></div>
<ol start="4">
<li>Close terminal</li>
</ol>
<hr />
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Basics | Docker]]></title>
            <guid>356a8ad3a858451cae2498a0fa002027</guid>
            <pubDate>Mon, 03 Oct 2022 11:58:11 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="docker">Docker</h1>
<p>update<br />
67676786<br />
<a href="/article/basics-or-docker">Docker</a><br />
<a href="/article/basics-or-system">System</a><br />
<a href="/article/basics-or-git">GIT</a><br />
<a href="/article/basics-or-linux">Linux</a></p>
<p><em>REQUIREMENT: Cloned Git-Repository which includes a DockerFile and Dockercompose (.yml) file</em></p>
<ul>
<li>Setting up the environment</li>
<li>Using the environment</li>
<li>Closing the environment</li>
<li>Common errors &amp; solutions</li>
</ul>
<h2 id="setting-the-environment">Setting the environment</h2>
<ol>
<li>Using a terminal, navigate to the folder which contains the Dockerfile (it should be the main folder of the repository)</li>
<li>Build the Dockerfile with the below code snippet.</li>
</ol>
<p><em>The Dockerfile should be a plaintext file called "Dockerfile"</em></p>
<div><pre class="hljs"><code>sudo docker build -t [name]:[version]            <span class="hljs-comment">#e.g. canopus:1.0</span></code></pre></div>
<ol start="3">
<li>Using the same terminal, use the below code snippet to initialize all the containers through a docker-compose (.yml) file.</li>
</ol>
<p><em>The Dockercompose file can be named however you like, but should use the .yml extension.</em></p>
<div><pre class="hljs"><code>sudo docker-compose -f docker-compose.yml up     <span class="hljs-comment">#-f flags allows for monitoring all containers in terminal</span></code></pre></div>
<h2 id="using-the-environment">Using the environment</h2>
<ol>
<li>Open a new terminal and enter the following commands:</li>
</ol>
<p><em>These commands are made for a container running 3.10-slim (Linux)</em></p>
<div><pre class="hljs"><code>sudo docker <span class="hljs-built_in">exec</span> -it [container name] /bin/bash <span class="hljs-comment">#e.g. sudo docker exec -it canopus /bin/bash</span></code></pre></div>
<ol start="2">
<li>In the same terminal (which is now a terminal within the container) navigate to the desired folder and run a file/program.</li>
</ol>
<div><pre class="hljs"><code><span class="hljs-built_in">cd</span> path/path &amp; program file.ext                 <span class="hljs-comment">#e.g. cd app &amp; python3 main.py</span></code></pre></div>
<h2 id="closing-the-environment">Closing the environment</h2>
<ol>
<li>Using the terminal which is running the docker-compose, enter <code>CTRL+C</code>. This terminates all running containers.</li>
<li>Enter the following command:</li>
</ol>
<div><pre class="hljs"><code>sudo docker-compose down                        <span class="hljs-comment">#add --remove-orphans if you want to clean everything</span></code></pre></div>
<ol start="3">
<li>Next time when starting the environment, you only have to do the <code>docker-compose up</code> from setting up the environment step 3</li>
</ol>
<h2 id="common-errors-solutions">Common errors &amp; solutions</h2>
<ul>
<li>Ports used in dockercompose file are already occupied</li>
</ul>
<h3 id="ports-used-in-dockercompose-file-are-already-occupied">Ports used in dockercompose file are already occupied</h3>
<ol>
<li>Open a new terminal</li>
<li>Identify program that is using the port</li>
</ol>
<div><pre class="hljs"><code>sudo lsof -i:[port]                             <span class="hljs-comment">#e.g. sudo lsof -i:2181</span></code></pre></div>
<p>This should return something like this:</p>
<div><pre class="hljs"><code>COMMAND PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
java    854 kafka  122u  IPv6  31313      0t0  TCP *:2181 (LISTEN)</code></pre></div>
<ol start="3">
<li>Terminate program that is using the port (decide at own discretion)</li>
</ol>
<div><pre class="hljs"><code>sudo <span class="hljs-built_in">kill</span> [PID]                                 <span class="hljs-comment">#e.g. sudo kill 854</span></code></pre></div>
<ol start="4">
<li>Close terminal</li>
</ol>
<hr />
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Basics | Linux]]></title>
            <guid>663aa4ef31574059bfbc87035e36fbf2</guid>
            <pubDate>Mon, 03 Oct 2022 07:25:18 GMT</pubDate>
            <content:encoded><![CDATA[<p>.main Linux</p>
<p><a href="/article/basics-or-docker">Docker</a><br />
<a href="/article/basics-or-system">System</a><br />
<a href="/article/basics-or-git">GIT</a><br />
<a href="/article/basics-or-linux">Linux</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Basics | GIT]]></title>
            <guid>8a5f7edea9074198b731aba290dbeb3e</guid>
            <pubDate>Wed, 28 Sep 2022 11:06:50 GMT</pubDate>
            <content:encoded><![CDATA[<p>.main GIT</p>
<p><a href="/article/basics-or-docker">Docker</a><br />
<a href="/article/basics-or-system">System</a><br />
<a href="/article/basics-or-git">GIT</a><br />
<a href="/article/basics-or-linux">Linux</a></p>
<p>WINDOWS<br />
installeer open-ssh<br />
installer git &amp; (git bash)</p>
<p>Volg deze tutorial<br />
<a title="https://www.gcptutorials.com/post/how-to-setup-ssh-authentication-to-github-in-windows-10" href="https://www.gcptutorials.com/post/how-to-setup-ssh-authentication-to-github-in-windows-10">https://www.gcptutorials.com/post/how-to-setup-ssh-authentication-to-github-in-windows-10</a></p>
<h3 id="install-git">Install Git</h3>
<div><pre class="hljs"><code><span class="hljs-keyword">def</span> <span class="hljs-title function_">thing</span>():
    <span class="hljs-built_in">print</span>(x)</code></pre></div>
<h3 id="install-github-desktop">Install GitHub Desktop</h3>
<div><pre class="hljs"><code><span class="hljs-attribute">sudo</span> wget https://github.com/shiftkey/desktop/releases/download/release-<span class="hljs-number">2</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>-linux3/GitHubDesktop-linux-<span class="hljs-number">2</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>-linux3.deb
<span class="hljs-comment">### Uncomment below line if you have not installed gdebi-core before</span>
<span class="hljs-comment"># sudo apt-get install gdebi-core </span>
<span class="hljs-attribute">sudo</span> gdebi GitHubDesktop-linux-<span class="hljs-number">2</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>-linux3.deb</code></pre></div>
]]></content:encoded>
        </item>
    </channel>
</rss>